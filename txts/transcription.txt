If you're struggling in Java, don't worry because I got you. Just take a nice deep breath, sit back, and I'm going to show you everything you need to know in Java. This video is made so you could just watch it on your phone or follow along if you want. I've been programming in Java for over eight years now. I graduated with a computer science degree and maybe like you, I had a lot of problems learning how to program at all. I had a breakdown in college when I thought I couldn't pass a few of the projects. So it was really hard for me. But I don't want to make it hard for you. I want to try to help you out wherever you are in your life with programming and hopefully you find this video helpful. This is everything you need to know about Java in 13 minutes. Hey, it's Alex back again helping you learn Java on this channel. If you're new here, I make a Java tutorial just like this one every single week. So if you're new here, then consider subscribing. Computers only understand zeros and ones, which makes it kind of difficult for a human. So to solve this, what we did is we made programming languages which are just a bunch of keywords and symbols that help us program a computer. The one we're learning today is obviously Java. And here's everything you need to know about Java to start getting started. What you see on the screen now is a programming environment. This is where you write code. You can write code in notepad or on a piece of paper, but none of those ways has a way to compile your code, which means turn it into zeros and ones. There are a bunch of tutorials on how to install Eclipse. This is the program Eclipse or Intellij is a good one. I made a video of installing Eclipse on Mac and Windows. It's on the screen now if you want to check that out. We'll just set up a file to start learning Java. So I'm just going to go to file new Java project. Type in the project name like Java Tutorial epicness, hit finish. Next, expand that up, right click on the source folder and go to new class. And this is just our Java file. We'll name our Java file like Learn Java. Hit this first check mark public, static, void, main and then hit finish. And we get some code looking stuff pop up on the screen. So like I said, a programming language is just a bunch of keywords and symbols. And it looks like this Java file already has some keywords and symbols in here for Us. A super useful thing we can do in Java is store data. So you can store, say, a number variable in Java by doing this. Int a equals say 5. This takes the value of 5 and stores it into A. You'll notice this keyword int, that stands for integer. And there are a bunch of other ones, like I'm just going to list a few. So here's a few more. There's one called character, long and double. Char stands for character. So this is how you would store a character variable. You would just put your character inside of single quotes and that would be stored into B. You got a few others like long, double, and there are a bunch more. These are called primitive types since they turn purple, like how primates are before humans. The the word primary means number one, primitive just means it was here before. It's built into Java, which is pretty sweet. Let's go on to non primitive types of storing data, because storing data is super cool. If we wanted to change our username, say on Instagram, it's got to store it somehow, right? So to store like a name, like a bunch of character variables, that would be called string with a capital S there, I'll name it like string name and set that equal to Susan and then put a semicolon at the end. Most statements will end in a semicolon, by the way. These don't for their own reasons. But if it doesn't have some sort of parentheses at the end, put a semicolon there. All these symbols help Java parse it, which just means go through and make sense of it all. So that's why these weird little semicolons exist. So now the name Susan is stored into name. But notice how this isn't turning purple. It's not a primitive type. If it's not turning purple, that probably means it's an object. And you can do so many things with objects, it's crazy to do crazy things with your object. We can just type the name of the string and in this case it's name. So we'll just type name. You'll see red underlines pop up. Don't worry about it. It's just trying to correct you before you make mistake. I think it's really stupid because we're not done yet. But after you have the name of your variable, hit a period. And this period is maybe one of the most important symbols in Java because it tells you everything that that variable can do for you. All that wonderful code built into Java, you have it accessed through this period. The programmer you're Writing Java in will most likely have like a little box here and you can scroll through it and this is everything you can do to that variable. So one I like to pick right now would be like to uppercase so I can just double click on it. Or you could type it out and then semicolon, since it's not opening a bracket. Well, how do we see this working? There's this great piece of code to print out so you can see things. It's called system print, line and then some parentheses. We're pretty much just taking this and sticking it inside of the parentheses of this code. This just puts it on the screen for us. So I'm just going to control S or command S to save it and I'm going to run it. And then in your console window, it might be called console, might be called something else. But in a window you should see your name to uppercase. Want to see something else? We can just delete this, do the dot again to bring up what it can do. And there's one called to lowercase, Save it again, run it again. And now it's all to lowercase this. Tolowercase has some parentheses here. And this putting text to the console window code has some parentheses here too. And anything that has parentheses like this is 99% of the time going to be a method. And methods are amazing. They're the. They're the bomb because they just do things for you, like what we did now. So let's make a method that puts an exclamation mark, say at the end of whatever string you want to start a method. Just write some keywords. We're going to write the keywords public, static, void. Don't worry too much about this. Right now they're just keywords. And every keyword has its own purpose. We'll name it like add x clamation points, parentheses, text, a string s in here, and then some curly braces to finish it off. I'm just going to delete these right now because it might look a little confusing. All this method is going to do is add an exclamation point to the end so we can just print out to the screen out like we did before. That's super useful. To put two strings together, use a plus sign. So in the parentheses we'll just type S, which is the name of the string, plus an exclamation mark inside of double quotes. Since characters and strings, anything that's not a number or a variable name has to be in quotation marks. Statements end in a Semicolon. We'll save it and run it and nothing happens because we're not calling the method. So we'll just type the name of the method and then something like hot dogs. Now we can save it and run it. And we see hot dogs with an exclamation mark. This right here goes here. And whatever's inside of these curly braces gets run. You can also return the results as a variable. So we can say return, which is another keyword s + the exclamation mark. We get a red underline because this keyword void is actually the type of what you want to bring back. So we just want to do a string. And now we can say a string exclaim is equal to what's returned from add exclamation point. It's stored in here, but let's print it out and it does the same thing. Remember I said the dot could bring up a bunch of methods that you could use? Well, you can also call them without a dot if it's in the same Java file. But now I'm going to show you how to use code from another Java file into your Java file. So I'll just right click source again, make a new class. I'll call it like animal and hit finish. I'll make a method just like we did before, say like iamdog. And all it does is return I am a dog. If we want to use the IAMDOG method, we can just. I'm just going to save it, Go in here, delete this code for now to call iamdog, we can just make an animal object like this. Animal A equals new animal. Anytime you're making an object, it's going to have this format. And there are a million types of objects out there you can use. But now we can just say a dot and it brings up what that object can do. And look, I am dog is here. We can just click it and then store that into a string dog and then print out dog, save it and run it. And now you see that I am dog message being returned to the variable doc. So a class is just a Java file that helps us make objects. Examples of commonly used objects are arraylist has the same format as before, but you got to put these little angle brackets. But a lot of objects will not come in your code. You have to bring them in. So usually what you'll do is hover over it and you'll see an import. Click the import suggestion and that'll generate this import keyword followed by like a path to the ArrayList code. This just means bring the ArrayList into our program so we can use it in ArrayList. You can do things like add. Can add a bunch of items like this is how they store movies or store a list of users. You can replace that and all sorts of things. So objects and methods are super powerful. Each object has its own methods and that's why Java is referred to as as oop, which is Object Oriented Programming. Each class represents an object which has its own methods. Like this one says I am dog and you can add as many as you want. Now you might be asking, how do I make a method that does something actually cool? Well, we can start another one. We'll say void since we don't want to return anything. You can do logic. In Java, one keyword is if. This is called an if statement. You would have a condition in here. Say like true and then it would run the code inside of here. Then this is useful if you have something like a is equal to 5, if a 2 equal signs, if a is equal to 0, then run this code. We tack on another one. Otherwise if A is equal to one, then we want to run this code. Otherwise if it's something else completely, then run this code. If else statements are super useful. You can repeat code by doing a for loop and a for loop format has the keyword for some parentheses and then a format that kind of looks like this. In simple terms, this will repeat the code inside of here five times. You can change it, changing this number eight, It'll run this code eight times. You can put A for loop inside of a for loop, which makes it really interesting. Just gotta change this variable. Now whatever's in here will be run 64 times because it loops eight times. And then another eight times inside. You can repeat code until a certain condition is met by typing the keyword while parentheses, curly braces and say like while a is equal to 5 again, print out. Hi. Actually, let's say, well, A is less than 50, print high and then increment A by one each time. That's what plus plus means. Let's just call do stuff so we can see what's going on. Go into the main method. Whatever's in the main method will get run when you click run. So we'll just make our animal again say A and then a period to bring out what we can do. And now we can see our do stuff method. If we run it, we'll see hi printout a lot. And then it'll stop until it gets to 49 because it start at 5, go up 6, 7, 8, 9, all the way up until 50 and it'll stop. Some other good logic ones are try, catch. So the keyword try and then catch, it'll try to run the code inside of here. If something goes wrong, an exception is thrown. An exception means just something went wrong with your program. And if something went wrong with your program, then the code inside of here will get run. Let's use other people's code and methods inside of ours. We can do that through an API. An API is pretty much just a long list of methods that you can use that were made from someone else, like Google, YouTube, Instagram, Twitter. Most software companies have APIs that you can use and bring inside your program and do cool stuff. And to use someone else's API, you pretty much go to their website, download this jar file, you would right click on your project, go to Properties, go to Java, build path, add external jars, pop in the jar that you just downloaded, say like Twitter API jar, hit apply, do an import statement just like this, but for the name of that jar. And then you could use the code that they wrote in your program. That's pretty much everything you need to know about Java. We went over primitive types, variables, storing data, objects, classes, methods, logic, like if, else, statements, and also what a lot of the symbols meant. So I really hope this helped you get started. I'm very new at this. I've been doing Java tutorials for a while. But like, trying to do it all at once was a bit of a challenge for me, so I tried my best. And of course, if you want more, I make a Java tutorial every week and you can subscribe down below if you don't want to miss any. So as always, you could be anywhere in the world, but you're here with me and I really appreciate that so much. I'll catch you in the next video.